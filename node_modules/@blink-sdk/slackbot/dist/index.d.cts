import { handleOAuthRequest, handleWebhook, isOAuthRequest, isWebhook } from "./webhook-BzeiYe_i.cjs";
import { ToolSet, UIMessage } from "ai";
import { SlackAPIClient } from "slack-edge";

//#region src/index.d.ts
interface ToolOptions<MESSAGE extends UIMessage = UIMessage> {
  messages: MESSAGE[];
  /**
   * Prompts the user to authorize the bot if the token is not found.
   *
   * Defaults to true, with a predefined set of scopes that work with the bot.
   */
  promptUserToAuthorize?: false | {
    url: string;
  };
  /**
   * Enable tools even if there is no Slack thread in the messages.
   * Disabled by default, because the tools must respond to a thread.
   * Unnecessary tools take up space in the model's context window.
   */
  enableToolsIfNotInThread?: boolean;
}
/**
 * Creates tools for a bot user in Slack to send messages.
 *
 * This must be used in conjunction with webhooks.
 *
 * You must configure a Slack App to use these tools and set the following environment variables:
 * - SLACK_CLIENT_ID
 * - SLACK_CLIENT_SECRET
 * - SLACK_SIGNING_SECRET
 *
 * Refer to [the README](https://github.com/coder/blink/blob/main/packages/sdk/slackbot/README.md) for detailed instructions.
 *
 * @example
 * ```ts
 * import * as slackbot from "@blink-sdk/slackbot";
 * import { convertToModelMessages, streamText } from "ai";
 * import blink from "blink";
 *
 * export default blink.agent({
 *   async sendMessages({ messages }) {
 *     return streamText({
 *       model: "anthropic/claude-sonnet-4",
 *       system: "You are a helpful assistant.",
 *       messages: convertToModelMessages(messages),
 *       tools: {
 *         ...slackbot.tools({
 *           messages,
 *         }),
 *       },
 *     });
 *   },
 *   async webhook(request) {
 *     if (slackbot.isOAuthRequest(request)) {
 *       return slackbot.handleOAuthRequest(request);
 *     }
 *     if (slackbot.isWebhook(request)) {
 *       return slackbot.handleWebhook(request);
 *     }
 *   },
 * });
 * ```
 *
 * The tools will only be enabled if message metadata shows that
 * the chat is occuring in a Slack thread.
 *
 * @param options - The options for the tools.
 * @returns The tools for the bot user in Slack.
 */
declare const tools: <MESSAGE extends UIMessage = UIMessage>(options: ToolOptions<MESSAGE>) => ToolSet;
/**
 * Get a Slack API client for given message metadata. Obtain the metadata with `findLastMessageMetadata`.
 * Use this to create your own tools that use the Slack API.
 *
 * @param metadata - The metadata for the last Slack message.
 * @param options - The options to create the client for.
 * @returns The Slack API client.
 */
declare const createClient: (metadata: SlackMessageMetadata, options?: {
  promptUserToAuthorize?: false | {
    url: string;
  };
}) => Promise<SlackAPIClient>;
/**
 * Metadata attached to every Slack message.
 */
interface SlackMessageMetadata {
  ts: string;
  channel: string;
  teamId: string;
}
/**
 * Finds the metadata for the last Slack message in the messages.
 *
 * @param messages - The messages to find the metadata for.
 * @returns The metadata for the last Slack message.
 */
declare const findLastMessageMetadata: <MESSAGE extends UIMessage = UIMessage>(messages: MESSAGE[]) => SlackMessageMetadata | undefined;
/**
 * System prompt can be optionally used to improve the behavior of the Slack bot.
 * It's common for LLMs to not understand that a response must be sent via a tool.
 */
declare const systemPrompt = "You are chatting with users in Slack.\n\nPrefer short responses. If you need to explain something, do so in a few sentences. Keep responses at a MAXIMUM 2,900 characters.\n\nYou MUST use \"slackbot\" tools to communicate with the user. If you are going to execute a bunch of tools, you MUST react to the user's message with a \"thinking_face\" reaction (or a relevant, fun emoji). ONLY AFTER you've responded with \"slackbot_send_message\" remove the reaction.\n\nMimic the tone of the user's messages. React to messages with relevant, fun emojis.\n\nYou MUST use the \"slackbot_send_message\" tool to send a message in Slack.\n\nIf users are chatting in Slack and it does not seem relevant to you, you MUST NOT respond. When you are mentioned with @Blonk, you MUST respond.";
//#endregion
export { SlackMessageMetadata, ToolOptions, createClient, findLastMessageMetadata, handleOAuthRequest, handleWebhook, isOAuthRequest, isWebhook, systemPrompt, tools };