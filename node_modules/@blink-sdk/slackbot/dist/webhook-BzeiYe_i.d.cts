import { EventLazyHandler, EventRequest, SlackApp, SlackEdgeAppEnv, SupportedEventType } from "slack-edge";
import { Message, MessageOptions } from "blink";

//#region src/webhook.d.ts

/**
 * Checks if a request is an OAuth request from Slack.
 *
 * @param request - The incoming request.
 * @returns True if the request is an OAuth request, false otherwise.
 */
declare const isOAuthRequest: (request: Request) => boolean;
/**
 * Handles an OAuth request from Slack.
 *
 * @param request - The incoming request.
 * @returns A response to Slack.
 */
declare const handleOAuthRequest: (request: Request, options?: {
  disableLogging?: boolean;
}) => Promise<Response>;
/**
 * Checks if a request is a webhook from Slack.
 *
 * @param request - The incoming request.
 * @returns True if the request is a webhook, false otherwise.
 */
declare const isWebhook: (request: Request) => boolean;
type WebhookOptions = SlackAppOptions & MessageEventHandlerOptions;
type SlackHandlers = Partial<Record<SupportedEventType, EventLazyHandler<SupportedEventType, SlackEdgeAppEnv>>>;
/**
 * handleWebhook handles a Slack webhook request.
 *
 * @param request - The incoming request.
 * @param options - The options for the Slack app.
 * @returns A response to Slack.
 */
declare const handleWebhook: (request: Request, options?: WebhookOptions) => Promise<Response>;
interface SlackAppOptions {
  /**
   * Disable the warning if a token is missing for a team.
   */
  disableWarnOnMissingToken?: boolean;
  /**
   * Log unhandled events. By default, this is disabled.
   * It's very spammy in the logs.
   */
  logUnhandledEvents?: boolean;
}
/**
 * createApp creates a Slack app that is authorized with the
 * Slack team bot token. It has no built-in handlers.
 *
 * Use this to entirely customize the behavior.
 *
 * @param options - The options for the Slack app.
 * @returns The Slack app.
 */
declare const createSlackApp: (options?: {
  disableWarnOnMissingToken?: boolean;
}) => SlackApp<SlackEdgeAppEnv>;
interface MessageEventHandlerOptions {
  /**
   * Respond to all messages. By default, we only respond to
   * messages that are explicitly tagged with the bot handle.
   */
  respondToAll?: boolean;
  /**
   * Create a custom UI message from the request.
   * If not provided, we'll inject a default message into the chat.
   * @param event - The event from Slack.
   * @returns The message to send to the chat.
   */
  createMessage?: <MESSAGE extends Message = Message>(event: EventRequest<SlackEdgeAppEnv, "message">) => Promise<MESSAGE>;
  /**
   * The behavior of the message.
   * By default, we will not interrupt Blink.
   */
  behavior?: MessageOptions["behavior"];
}
declare const createMessageEventHandler: (options?: MessageEventHandlerOptions) => EventLazyHandler<"message", SlackEdgeAppEnv>;
//#endregion
export { MessageEventHandlerOptions, SlackAppOptions, SlackHandlers, WebhookOptions, createMessageEventHandler, createSlackApp, handleOAuthRequest, handleWebhook, isOAuthRequest, isWebhook };