import e from"util";const t=Object.freeze({find(e){throw Error(`Not implemented`)},create(e){throw Error(`Not implemented`)},message(e,t,n){throw Error(`Not implemented`)}});function n(e){return{version:`v0`,fetch:async t=>{let n=new URL(t.url);switch(n.pathname){case`/sendMessages`:return i(t,e);case`/webhook`:return a(t,e);default:return new Response(`Not found`,{status:404})}}}}let r;async function i(t,n){if(t.method!==`POST`)return new Response(`Method not allowed`,{status:405});let i;try{i=await t.json()}catch{return new Response(`Invalid request`,{status:400})}let a;try{a=await n.sendMessages({messages:i.messages})}catch(t){return new Response(JSON.stringify({error:e.inspect(t)}),{status:500})}if(a instanceof Response)return a;if(a instanceof ReadableStream)return new Response(a,{headers:{"Content-Type":`text/event-stream`}});if(typeof a!=`object`||typeof a==`object`&&!(`toUIMessageStream`in a))throw Error(`The agent must return a "Response", "ReadableStream", or "toUIMessageStream" function.`);r||=new TextEncoder;let o=new TransformStream({transform(e,t){t.enqueue(r.encode(`data: ${JSON.stringify(e)}\n\n`))}}),s=a.toUIMessageStream();return s.pipeTo(o.writable),new Response(o.readable,{headers:{"Content-Type":`text/event-stream`}})}async function a(t,n){if(!n.webhook)return new Response(`No webhook function provided`,{status:501});try{let e=await n.webhook(t);return e||new Response(`OK`,{status:200})}catch(t){return new Response(JSON.stringify({error:e.inspect(t)}),{status:500})}}const o=`x-blink-stream-response-format`;function s(e,t){return e.headers.set(o,t),e}export{o as StreamResponseFormatHeader,n as agent,t as chat,s as withResponseFormat};