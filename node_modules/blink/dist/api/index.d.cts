import { AsyncIterableStream, InferUIMessageChunk, UIDataTypes, UIMessage, UIMessagePart, UITools } from "ai";

//#region src/api/chat.d.ts
interface Chat {
  readonly id: string;
}
interface MessageOptions {
  readonly behavior?: "enqueue" | "interrupt";
}
interface Message<METADATA = unknown, DATA_TYPES extends UIDataTypes = UIDataTypes, TOOLS extends UITools = UITools> {
  readonly role: UIMessage["role"];
  readonly parts: UIMessagePart<DATA_TYPES, TOOLS>[];
  readonly metadata?: METADATA;
}
declare const chat: Readonly<{
  upsert: (id: string) => Promise<Chat>;
  message: (id: string, message: Message, options?: MessageOptions) => Promise<void>;
}>;
//#endregion
//#region src/api/storage.d.ts
/**
 * Storage is namespaced by the agent.
 */
declare const storage: Readonly<{
  get: (key: string) => Promise<string | undefined>;
  set: (key: string, value: string) => Promise<void>;
}>;
//#endregion
//#region src/api/index.d.ts
/**
 * SendMessagesResponse is the response of the sendMessages function.
 * It can be a stream of messages or an arbitrary response.
 */
type SendMessagesResponse = {
  toUIMessageStream(): AsyncIterableStream<InferUIMessageChunk<UIMessage>>;
} | Response | ReadableStream<InferUIMessageChunk<UIMessage>>;
/**
 * SendMessagesOptions is the options for the sendMessages function.
 */
interface SendMessagesOptions {
  readonly messages: UIMessage[];
  readonly abortSignal?: AbortSignal;
  readonly request: Request;
}
interface Agent {
  sendMessages(options: SendMessagesOptions): Promise<SendMessagesResponse> | SendMessagesResponse;
  webhook?(request: Request): Promise<Response | void>;
}
/**
 * AgentDefaultExport is the expected default export of a compiled agent.
 * All routing logic is handled by the agent function.
 *
 * This maximizes flexibility over the agent's behavior -
 * allowing users to add arbitrary routing logic to the agent.
 */
type AgentDefaultExport = {
  readonly version: "v0";
  fetch: (request: Request) => Promise<Response> | Response;
  readonly supportsWebhooks?: boolean;
};
/**
 * agent is the main function to create a Blink agent.
 *
 * @param agent
 * @returns
 */
declare function agent(agent: Agent): AgentDefaultExport;
type StreamResponseFormat = "ui-message" | "openai-chat" | "openai-response" | "anthropic" | "google" | "xai";
declare function withResponseFormat(response: Response, format: StreamResponseFormat): Response;
declare const _default: {
  agent: typeof agent;
  chat: Readonly<{
    upsert: (id: string) => Promise<Chat>;
    message: (id: string, message: Message, options?: MessageOptions) => Promise<void>;
  }>;
  storage: Readonly<{
    get: (key: string) => Promise<string | undefined>;
    set: (key: string, value: string) => Promise<void>;
  }>;
};
//#endregion
export { Agent, AgentDefaultExport, Chat, Message, MessageOptions, SendMessagesOptions, SendMessagesResponse, StreamResponseFormat, agent, chat, _default as default, storage, withResponseFormat };