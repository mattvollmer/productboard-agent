import { AsyncIterableStream, InferUIMessageChunk, UIMessage } from "ai";

//#region src/api/index.d.ts

/**
 * SendMessagesResponse is the response of the sendMessages function.
 * It can be a stream of messages or an arbitrary response.
 */
type SendMessagesResponse = {
  toUIMessageStream(): AsyncIterableStream<InferUIMessageChunk<UIMessage>>;
} | Response | ReadableStream<InferUIMessageChunk<UIMessage>>;
/**
 * SendMessagesOptions is the options for the sendMessages function.
 */
interface SendMessagesOptions {
  readonly messages: UIMessage[];
  readonly abortSignal?: AbortSignal;
  readonly request: Request;
}
interface Agent {
  sendMessages(options: SendMessagesOptions): Promise<SendMessagesResponse> | SendMessagesResponse;
  webhook?(request: Request): Promise<Response | void>;
}
/**
 * AgentDefaultExport is the expected default export of a compiled agent.
 * All routing logic is handled by the agent function.
 *
 * This maximizes flexibility over the agent's behavior -
 * allowing users to add arbitrary routing logic to the agent.
 */
type AgentDefaultExport = {
  readonly version: "v0";
  fetch: (request: Request) => Promise<Response> | Response;
};
/**
 * agent is the main function to create a Blink agent.
 *
 * @param agent
 * @returns
 */
declare function agent(agent: Agent): AgentDefaultExport;
interface SendMessagesRequest {
  readonly messages: UIMessage[];
}
declare const StreamResponseFormatHeader = "x-blink-stream-response-format";
type StreamResponseFormat = "ui-message" | "openai-chat" | "openai-response" | "anthropic" | "google" | "xai";
declare function withResponseFormat(response: Response, format: StreamResponseFormat): Response;
//#endregion
export { Agent, AgentDefaultExport, SendMessagesOptions, SendMessagesRequest, SendMessagesResponse, StreamResponseFormat, StreamResponseFormatHeader, agent, withResponseFormat };