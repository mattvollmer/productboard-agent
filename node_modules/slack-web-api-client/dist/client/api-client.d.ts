import type { AdminAppsActivitiesListRequest, AdminAppsApproveRequest, AdminAppsApprovedListRequest, AdminAppsClearResolutionRequest, AdminAppsRequestsCancelRequest, AdminAppsRequestsListRequest, AdminAppsRestrictRequest, AdminAppsRestrictedListRequest, AdminAppsUninstallRequest, AdminAuthPolicyAssignEntitiesRequest, AdminAuthPolicyGetEntitiesRequest, AdminAuthPolicyRemoveEntitiesRequest, AdminBarriersCreateRequest, AdminBarriersDeleteRequest, AdminBarriersListRequest, AdminBarriersUpdateRequest, AdminConversationsArchiveRequest, AdminConversationsBulkArchiveRequest, AdminConversationsBulkDeleteRequest, AdminConversationsBulkMoveRequest, AdminConversationsConvertToPrivateRequest, AdminConversationsConvertToPublicRequest, AdminConversationsCreateRequest, AdminConversationsDeleteRequest, AdminConversationsDisconnectSharedRequest, AdminConversationsEKMListOriginalConnectedChannelInfoRequest, AdminConversationsGetConversationPrefsRequest, AdminConversationsGetCustomRetentionRequest, AdminConversationsGetTeamsRequest, AdminConversationsInviteRequest, AdminConversationsLookupRequest, AdminConversationsRemoveCustomRetentionRequest, AdminConversationsRenameRequest, AdminConversationsRestrictAccessAddGroupRequest, AdminConversationsRestrictAccessListGroupsRequest, AdminConversationsRestrictAccessRemoveGroupRequest, AdminConversationsSearchRequest, AdminConversationsSetConversationPrefsRequest, AdminConversationsSetCustomRetentionRequest, AdminConversationsSetTeamsRequest, AdminConversationsUnarchiveRequest, AdminEmojiAddAliasRequest, AdminEmojiAddRequest, AdminEmojiListRequest, AdminEmojiRemoveRequest, AdminEmojiRenameRequest, AdminFunctionsListRequest, AdminFunctionsPermissionsLookupRequest, AdminFunctionsPermissionsSetRequest, AdminInviteRequestsApproveRequest, AdminInviteRequestsApprovedListRequest, AdminInviteRequestsDeniedListRequest, AdminInviteRequestsDenyRequest, AdminInviteRequestsListRequest, AdminRolesAddAssignmentsRequest, AdminRolesListAssignmentsRequest, AdminRolesRemoveAssignmentsRequest, AdminTeamsAdminsListRequest, AdminTeamsCreateRequest, AdminTeamsListRequest, AdminTeamsOwnersListRequest, AdminTeamsSettingsInfoRequest, AdminTeamsSettingsSetDefaultChannelsRequest, AdminTeamsSettingsSetDescriptionRequest, AdminTeamsSettingsSetDiscoverabilityRequest, AdminTeamsSettingsSetIconRequest, AdminTeamsSettingsSetNameRequest, AdminUsergroupsAddChannelsRequest, AdminUsergroupsAddTeamsRequest, AdminUsergroupsListChannelsRequest, AdminUsergroupsRemoveChannelsRequest, AdminUsersAssignRequest, AdminUsersInviteRequest, AdminUsersListRequest, AdminUsersRemoveRequest, AdminUsersSessionClearSettingsRequest, AdminUsersSessionGetSettingsRequest, AdminUsersSessionInvalidateRequest, AdminUsersSessionListRequest, AdminUsersSessionResetBulkRequest, AdminUsersSessionResetRequest, AdminUsersSessionSetSettingsRequest, AdminUsersSetAdminRequest, AdminUsersSetExpirationRequest, AdminUsersSetOwnerRequest, AdminUsersSetRegularRequest, AdminUsersUnsupportedVersionsExportRequest, AdminWorkflowsCollaboratorsAddRequest, AdminWorkflowsCollaboratorsRemoveRequest, AdminWorkflowsPermissionsLookupRequest, AdminWorkflowsSearchRequest, AdminWorkflowsUnpublishRequest, AppsDatastoreDeleteRequest, AppsDatastoreGetRequest, AppsDatastorePutRequest, AppsDatastoreQueryRequest, AppsDatastoreUpdateRequest, AppsEventAuthorizationsListRequest, AppsManifestCreateRequest, AppsManifestDeleteRequest, AppsManifestExportRequest, AppsManifestUpdateRequest, AppsManifestValidateRequest, AppsUninstallRequest, AssistantThreadsSetStatusRequest, AssistantThreadsSetSuggestedPromptsRequest, AssistantThreadsSetTitleRequest, AuthRevokeRequest, AuthTeamsListRequest, BookmarksAddRequest, BookmarksEditRequest, BookmarksListRequest, BookmarksRemoveRequest, BotsInfoRequest, CanvasesAccessDeleteRequest, CanvasesAccessSetRequest, CanvasesCreateRequest, CanvasesDeleteRequest, CanvasesEditRequest, CanvasesSectionsLookupRequest, ChatDeleteRequest, ChatDeleteScheduledMessageRequest, ChatGetPermalinkRequest, ChatMeMessageRequest, ChatPostEphemeralRequest, ChatPostMessageRequest, ChatScheduleMessageRequest, ChatScheduledMessagesListRequest, ChatUnfurlRequest, ChatUpdateRequest, ConversationsAcceptSharedInviteRequest, ConversationsApproveSharedInviteRequest, ConversationsArchiveRequest, ConversationsCanvasesCreateRequest, ConversationsCloseRequest, ConversationsCreateRequest, ConversationsDeclineSharedInviteRequest, ConversationsExternalInvitePermissionsSetRequest, ConversationsHistoryRequest, ConversationsInfoRequest, ConversationsInviteRequest, ConversationsInviteSharedRequest, ConversationsJoinRequest, ConversationsKickRequest, ConversationsLeaveRequest, ConversationsListConnectInvitesRequest, ConversationsListRequest, ConversationsMarkRequest, ConversationsMembersRequest, ConversationsOpenRequest, ConversationsRenameRequest, ConversationsRepliesRequest, ConversationsRequestSharedInviteApproveRequest, ConversationsRequestSharedInviteDenyRequest, ConversationsRequestSharedInviteListRequest, ConversationsSetPurposeRequest, ConversationsSetTopicRequest, ConversationsUnarchiveRequest, DndInfoRequest, DndSetSnoozeRequest, DndTeamInfoRequest, EmojiListRequest, FilesCompleteUploadExternalRequest, FilesDeleteRequest, FilesGetUploadURLExternalRequest, FilesInfoRequest, FilesListRequest, FilesRemoteAddRequest, FilesRemoteInfoRequest, FilesRemoteListRequest, FilesRemoteRemoveRequest, FilesRemoteShareRequest, FilesRemoteUpdateRequest, FilesRevokePublicURLRequest, FilesSharedPublicURLRequest, FilesUploadRequest, FilesUploadV2Request, FunctionsCompleteErrorRequest, FunctionsCompleteSuccessRequest, MigrationExchangeRequest, OAuthV2AccessRequest, OAuthV2ExchangeRequest, OpenIDConnectTokenRequest, PinsAddRequest, PinsListRequest, PinsRemoveRequest, ReactionsAddRequest, ReactionsGetRequest, ReactionsListRequest, ReactionsRemoveRequest, RemindersAddRequest, RemindersCompleteRequest, RemindersDeleteRequest, RemindersInfoRequest, SearchAllRequest, SearchFilesRequest, SearchMessagesRequest, SlackAPIRequest, StarsAddRequest, StarsListRequest, StarsRemoveRequest, TeamAccessLogsRequest, TeamBillableInfoRequest, TeamExternalTeamsDisconnectRequest, TeamExternalTeamsListRequest, TeamInfoRequest, TeamIntegrationLogsRequest, TeamProfileGetRequest, ToolingTokensRotateRequest, UsergroupsCreateRequest, UsergroupsDisableRequest, UsergroupsEnableRequest, UsergroupsListRequest, UsergroupsUpdateRequest, UsergroupsUsersListRequest, UsergroupsUsersUpdateRequest, UsersConversationsRequest, UsersDiscoverableContactsLookupRequest, UsersGetPresenceRequest, UsersInfoRequest, UsersListRequest, UsersLookupByEmailRequest, UsersProfileGetRequest, UsersProfileSetRequest, UsersSetPhotoRequest, UsersSetPresenceRequest, ViewsOpenRequest, ViewsPublishRequest, ViewsPushRequest, ViewsUpdateRequest, WorkflowsTriggersCreateRequest, WorkflowsTriggersDeleteRequest, WorkflowsTriggersListRequest, WorkflowsTriggersUpdateRequest } from "./request";
import type { AdminAppsApproveResponse, AdminAppsApprovedListResponse, AdminAppsClearResolutionResponse, AdminAppsRequestsCancelResponse, AdminAppsRequestsListResponse, AdminAppsRestrictResponse, AdminAppsRestrictedListResponse, AdminAppsUninstallResponse, AdminAuthPolicyAssignEntitiesResponse, AdminAuthPolicyGetEntitiesResponse, AdminAuthPolicyRemoveEntitiesResponse, AdminBarriersCreateResponse, AdminBarriersDeleteResponse, AdminBarriersListResponse, AdminBarriersUpdateResponse, AdminConversationsArchiveResponse, AdminConversationsBulkArchiveResponse, AdminConversationsBulkDeleteResponse, AdminConversationsBulkMoveResponse, AdminConversationsConvertToPrivateResponse, AdminConversationsCreateResponse, AdminConversationsDeleteResponse, AdminConversationsDisconnectSharedResponse, AdminConversationsEkmListOriginalConnectedChannelInfoResponse, AdminConversationsGetConversationPrefsResponse, AdminConversationsGetTeamsResponse, AdminConversationsInviteResponse, AdminConversationsRenameResponse, AdminConversationsRestrictAccessAddGroupResponse, AdminConversationsRestrictAccessListGroupsResponse, AdminConversationsRestrictAccessRemoveGroupResponse, AdminConversationsGetCustomRetentionResponse, AdminConversationsSetCustomRetentionResponse, AdminConversationsRemoveCustomRetentionResponse, AdminConversationsSearchResponse, AdminConversationsSetConversationPrefsResponse, AdminConversationsSetTeamsResponse, AdminConversationsUnarchiveResponse, AdminEmojiAddResponse, AdminEmojiAddAliasResponse, AdminEmojiListResponse, AdminEmojiRemoveResponse, AdminEmojiRenameResponse, AdminInviteRequestsApproveResponse, AdminInviteRequestsApprovedListResponse, AdminInviteRequestsDeniedListResponse, AdminInviteRequestsDenyResponse, AdminInviteRequestsListResponse, AdminTeamsAdminsListResponse, AdminTeamsCreateResponse, AdminTeamsListResponse, AdminTeamsOwnersListResponse, AdminTeamsSettingsInfoResponse, AdminTeamsSettingsSetDefaultChannelsResponse, AdminTeamsSettingsSetDescriptionResponse, AdminTeamsSettingsSetDiscoverabilityResponse, AdminTeamsSettingsSetIconResponse, AdminTeamsSettingsSetNameResponse, AdminUsergroupsAddChannelsResponse, AdminUsergroupsAddTeamsResponse, AdminUsergroupsListChannelsResponse, AdminUsergroupsRemoveChannelsResponse, AdminUsersAssignResponse, AdminUsersInviteResponse, AdminUsersListResponse, AdminUsersRemoveResponse, AdminUsersSessionListResponse, AdminUsersSessionResetResponse, AdminUsersSessionResetBulkResponse, AdminUsersSessionInvalidateResponse, AdminUsersSessionGetSettingsResponse, AdminUsersSessionSetSettingsResponse, AdminUsersSessionClearSettingsResponse, AdminUsersUnsupportedVersionsExportResponse, AdminUsersSetAdminResponse, AdminUsersSetExpirationResponse, AdminUsersSetOwnerResponse, AdminUsersSetRegularResponse, ApiTestResponse, AppsConnectionsOpenResponse, AppsEventAuthorizationsListResponse, AppsUninstallResponse, AuthRevokeResponse, AuthTeamsListResponse, AuthTestResponse, BotsInfoResponse, BookmarksAddResponse, BookmarksEditResponse, BookmarksListResponse, BookmarksRemoveResponse, ChatDeleteResponse, ChatDeleteScheduledMessageResponse, ChatGetPermalinkResponse, ChatMeMessageResponse, ChatPostEphemeralResponse, ChatPostMessageResponse, ChatScheduleMessageResponse, ChatScheduledMessagesListResponse, ChatUnfurlResponse, ChatUpdateResponse, ConversationsAcceptSharedInviteResponse, ConversationsApproveSharedInviteResponse, ConversationsArchiveResponse, ConversationsCloseResponse, ConversationsCreateResponse, ConversationsDeclineSharedInviteResponse, ConversationsHistoryResponse, ConversationsInfoResponse, ConversationsInviteResponse, ConversationsInviteSharedResponse, ConversationsJoinResponse, ConversationsKickResponse, ConversationsLeaveResponse, ConversationsListResponse, ConversationsListConnectInvitesResponse, ConversationsMarkResponse, ConversationsMembersResponse, ConversationsOpenResponse, ConversationsRenameResponse, ConversationsRepliesResponse, ConversationsSetPurposeResponse, ConversationsSetTopicResponse, ConversationsUnarchiveResponse, DndEndDndResponse, DndEndSnoozeResponse, DndInfoResponse, DndSetSnoozeResponse, DndTeamInfoResponse, EmojiListResponse, FilesDeleteResponse, FilesInfoResponse, FilesListResponse, FilesRevokePublicURLResponse, FilesSharedPublicURLResponse, FilesUploadResponse, FilesGetUploadURLExternalResponse, FilesCompleteUploadExternalResponse, FilesRemoteInfoResponse, FilesRemoteListResponse, FilesRemoteAddResponse, FilesRemoteUpdateResponse, FilesRemoteRemoveResponse, FilesRemoteShareResponse, MigrationExchangeResponse, OAuthV2AccessResponse, OAuthV2ExchangeResponse, OpenIDConnectTokenResponse, OpenIDConnectUserInfoResponse, PinsAddResponse, PinsListResponse, PinsRemoveResponse, ReactionsAddResponse, ReactionsGetResponse, ReactionsListResponse, ReactionsRemoveResponse, RemindersAddResponse, RemindersCompleteResponse, RemindersDeleteResponse, RemindersInfoResponse, RemindersListResponse, SearchAllResponse, SearchFilesResponse, SearchMessagesResponse, StarsAddResponse, StarsListResponse, StarsRemoveResponse, TeamAccessLogsResponse, TeamBillableInfoResponse, TeamBillingInfoResponse, TeamInfoResponse, TeamIntegrationLogsResponse, TeamPreferencesListResponse, TeamProfileGetResponse, UsergroupsCreateResponse, UsergroupsDisableResponse, UsergroupsEnableResponse, UsergroupsListResponse, UsergroupsUpdateResponse, UsergroupsUsersListResponse, UsergroupsUsersUpdateResponse, UsersConversationsResponse, UsersDeletePhotoResponse, UsersGetPresenceResponse, UsersIdentityResponse, UsersInfoResponse, UsersListResponse, UsersLookupByEmailResponse, UsersSetPhotoResponse, UsersSetPresenceResponse, UsersProfileGetResponse, UsersProfileSetResponse, ViewsOpenResponse, ViewsPublishResponse, ViewsPushResponse, ViewsUpdateResponse, AdminConversationsConvertToPublicResponse, AdminConversationsLookupResponse, AdminRolesAddAssignmentsResponse, AdminRolesListAssignmentsResponse, AdminRolesRemoveAssignmentsResponse, AdminAppsActivitiesListResponse, AdminFunctionsListResponse, AdminFunctionsPermissionsLookupResponse, AdminFunctionsPermissionsSetResponse, AdminWorkflowsSearchResponse, AdminWorkflowsUnpublishResponse, AdminWorkflowsPermissionsLookupResponse, AdminWorkflowsCollaboratorsAddResponse, AdminWorkflowsCollaboratorsRemoveResponse, AppsManifestCreateResponse, AppsManifestDeleteResponse, AppsManifestUpdateResponse, AppsManifestExportResponse, AppsManifestValidateResponse, ToolingTokensRotateResponse, FunctionsCompleteErrorResponse, FunctionsCompleteSuccessResponse, CanvasesAccessDeleteResponse, CanvasesAccessSetResponse, CanvasesCreateResponse, CanvasesEditResponse, CanvasesDeleteResponse, CanvasesSectionsLookupResponse, ConversationsCanvasesCreateResponse, UsersDiscoverableContactsLookupResponse, TeamExternalTeamsListResponse, ConversationsExternalInvitePermissionsSetResponse, TeamExternalTeamsDisconnectResponse, ConversationsRequestSharedInviteApproveResponse, ConversationsRequestSharedInviteDenyResponse, AssistantThreadsSetStatusResponse, AssistantThreadsSetSuggestedPromptsResponse, AssistantThreadsSetTitleResponse, ConversationsRequestSharedInviteListResponse } from "./generated-response/index";
import type { SlackAPIResponse } from "./response";
import type { SlackAPIClientOptions } from "./api-client-options";
import type { AppsDatastoreGetResponse, AppsDatastorePutResponse, AppsDatastoreQueryResponse, AppsDatastoreUpdateResponse, WorkflowsTriggersCreateResponse, WorkflowsTriggersListResponse, WorkflowsTriggersUpdateResponse } from "./automation-response/index";
import type { FilesUploadV2Response } from "./custom-response/FilesUploadV2Response";
import type { RetryHandler, RetryHandlerState } from "./retry-handler/index";
export interface SlackAPI<Req extends SlackAPIRequest, Resp extends SlackAPIResponse> {
    (args: Req): Promise<Resp>;
}
export interface NoArgAllowedSlackAPI<Req extends SlackAPIRequest, Resp extends SlackAPIResponse> extends SlackAPI<Req, Resp> {
    (args?: Req): Promise<Resp>;
}
export declare class SlackAPIClient {
    #private;
    retryHandlers: RetryHandler[];
    constructor(token?: string | undefined, options?: SlackAPIClientOptions);
    call(name: string, params?: Record<string, any>, retryHandlerState?: RetryHandlerState | undefined): Promise<SlackAPIResponse>;
    readonly admin: {
        apps: {
            approve: NoArgAllowedSlackAPI<AdminAppsApproveRequest, AdminAppsApproveResponse>;
            approved: {
                list: NoArgAllowedSlackAPI<AdminAppsApprovedListRequest, AdminAppsApprovedListResponse>;
            };
            clearResolution: SlackAPI<AdminAppsClearResolutionRequest, AdminAppsClearResolutionResponse>;
            requests: {
                cancel: SlackAPI<AdminAppsRequestsCancelRequest, AdminAppsRequestsCancelResponse>;
                list: NoArgAllowedSlackAPI<AdminAppsRequestsListRequest, AdminAppsRequestsListResponse>;
            };
            restrict: NoArgAllowedSlackAPI<AdminAppsRestrictRequest, AdminAppsRestrictResponse>;
            restricted: {
                list: NoArgAllowedSlackAPI<AdminAppsRestrictedListRequest, AdminAppsRestrictedListResponse>;
            };
            uninstall: SlackAPI<AdminAppsUninstallRequest, AdminAppsUninstallResponse>;
            activities: {
                list: NoArgAllowedSlackAPI<AdminAppsActivitiesListRequest, AdminAppsActivitiesListResponse>;
            };
        };
        auth: {
            policy: {
                assignEntities: SlackAPI<AdminAuthPolicyAssignEntitiesRequest, AdminAuthPolicyAssignEntitiesResponse>;
                getEntities: SlackAPI<AdminAuthPolicyGetEntitiesRequest, AdminAuthPolicyGetEntitiesResponse>;
                removeEntities: SlackAPI<AdminAuthPolicyRemoveEntitiesRequest, AdminAuthPolicyRemoveEntitiesResponse>;
            };
        };
        barriers: {
            create: SlackAPI<AdminBarriersCreateRequest, AdminBarriersCreateResponse>;
            delete: SlackAPI<AdminBarriersDeleteRequest, AdminBarriersDeleteResponse>;
            list: NoArgAllowedSlackAPI<AdminBarriersListRequest, AdminBarriersListResponse>;
            update: SlackAPI<AdminBarriersUpdateRequest, AdminBarriersUpdateResponse>;
        };
        conversations: {
            archive: SlackAPI<AdminConversationsArchiveRequest, AdminConversationsArchiveResponse>;
            bulkArchive: SlackAPI<AdminConversationsBulkArchiveRequest, AdminConversationsBulkArchiveResponse>;
            bulkDelete: SlackAPI<AdminConversationsBulkDeleteRequest, AdminConversationsBulkDeleteResponse>;
            bulkMove: SlackAPI<AdminConversationsBulkMoveRequest, AdminConversationsBulkMoveResponse>;
            convertToPrivate: SlackAPI<AdminConversationsConvertToPrivateRequest, AdminConversationsConvertToPrivateResponse>;
            convertToPublic: SlackAPI<AdminConversationsConvertToPublicRequest, AdminConversationsConvertToPublicResponse>;
            create: SlackAPI<AdminConversationsCreateRequest, AdminConversationsCreateResponse>;
            delete: SlackAPI<AdminConversationsDeleteRequest, AdminConversationsDeleteResponse>;
            disconnectShared: SlackAPI<AdminConversationsDisconnectSharedRequest, AdminConversationsDisconnectSharedResponse>;
            ekm: {
                listOriginalConnectedChannelInfo: NoArgAllowedSlackAPI<AdminConversationsEKMListOriginalConnectedChannelInfoRequest, AdminConversationsEkmListOriginalConnectedChannelInfoResponse>;
            };
            getConversationPrefs: SlackAPI<AdminConversationsGetConversationPrefsRequest, AdminConversationsGetConversationPrefsResponse>;
            getTeams: SlackAPI<AdminConversationsGetTeamsRequest, AdminConversationsGetTeamsResponse>;
            invite: SlackAPI<AdminConversationsInviteRequest, AdminConversationsInviteResponse>;
            rename: SlackAPI<AdminConversationsRenameRequest, AdminConversationsRenameResponse>;
            restrictAccess: {
                addGroup: SlackAPI<AdminConversationsRestrictAccessAddGroupRequest, AdminConversationsRestrictAccessAddGroupResponse>;
                listGroups: SlackAPI<AdminConversationsRestrictAccessListGroupsRequest, AdminConversationsRestrictAccessListGroupsResponse>;
                removeGroup: SlackAPI<AdminConversationsRestrictAccessRemoveGroupRequest, AdminConversationsRestrictAccessRemoveGroupResponse>;
            };
            requestSharedInvite: {
                approve: SlackAPI<ConversationsRequestSharedInviteApproveRequest, ConversationsRequestSharedInviteApproveResponse>;
                deny: SlackAPI<ConversationsRequestSharedInviteDenyRequest, ConversationsRequestSharedInviteDenyResponse>;
                list: SlackAPI<ConversationsRequestSharedInviteListRequest, ConversationsRequestSharedInviteListResponse>;
            };
            getCustomRetention: SlackAPI<AdminConversationsGetCustomRetentionRequest, AdminConversationsGetCustomRetentionResponse>;
            setCustomRetention: SlackAPI<AdminConversationsSetCustomRetentionRequest, AdminConversationsSetCustomRetentionResponse>;
            removeCustomRetention: SlackAPI<AdminConversationsRemoveCustomRetentionRequest, AdminConversationsRemoveCustomRetentionResponse>;
            lookup: SlackAPI<AdminConversationsLookupRequest, AdminConversationsLookupResponse>;
            search: NoArgAllowedSlackAPI<AdminConversationsSearchRequest, AdminConversationsSearchResponse>;
            setConversationPrefs: SlackAPI<AdminConversationsSetConversationPrefsRequest, AdminConversationsSetConversationPrefsResponse>;
            setTeams: SlackAPI<AdminConversationsSetTeamsRequest, AdminConversationsSetTeamsResponse>;
            unarchive: SlackAPI<AdminConversationsUnarchiveRequest, AdminConversationsUnarchiveResponse>;
        };
        emoji: {
            add: SlackAPI<AdminEmojiAddRequest, AdminEmojiAddResponse>;
            addAlias: SlackAPI<AdminEmojiAddAliasRequest, AdminEmojiAddAliasResponse>;
            list: SlackAPI<AdminEmojiListRequest, AdminEmojiListResponse>;
            remove: SlackAPI<AdminEmojiRemoveRequest, AdminEmojiRemoveResponse>;
            rename: SlackAPI<AdminEmojiRenameRequest, AdminEmojiRenameResponse>;
        };
        functions: {
            list: SlackAPI<AdminFunctionsListRequest, AdminFunctionsListResponse>;
            permissions: {
                lookup: SlackAPI<AdminFunctionsPermissionsLookupRequest, AdminFunctionsPermissionsLookupResponse>;
                set: SlackAPI<AdminFunctionsPermissionsSetRequest, AdminFunctionsPermissionsSetResponse>;
            };
        };
        inviteRequests: {
            approve: SlackAPI<AdminInviteRequestsApproveRequest, AdminInviteRequestsApproveResponse>;
            approved: {
                list: SlackAPI<AdminInviteRequestsApprovedListRequest, AdminInviteRequestsApprovedListResponse>;
            };
            denied: {
                list: SlackAPI<AdminInviteRequestsDeniedListRequest, AdminInviteRequestsDeniedListResponse>;
            };
            deny: SlackAPI<AdminInviteRequestsDenyRequest, AdminInviteRequestsDenyResponse>;
            list: SlackAPI<AdminInviteRequestsListRequest, AdminInviteRequestsListResponse>;
        };
        roles: {
            addAssignments: SlackAPI<AdminRolesAddAssignmentsRequest, AdminRolesAddAssignmentsResponse>;
            listAssignments: NoArgAllowedSlackAPI<AdminRolesListAssignmentsRequest, AdminRolesListAssignmentsResponse>;
            removeAssignments: SlackAPI<AdminRolesRemoveAssignmentsRequest, AdminRolesRemoveAssignmentsResponse>;
        };
        teams: {
            admins: {
                list: SlackAPI<AdminTeamsAdminsListRequest, AdminTeamsAdminsListResponse>;
            };
            create: SlackAPI<AdminTeamsCreateRequest, AdminTeamsCreateResponse>;
            list: NoArgAllowedSlackAPI<AdminTeamsListRequest, AdminTeamsListResponse>;
            owners: {
                list: SlackAPI<AdminTeamsOwnersListRequest, AdminTeamsOwnersListResponse>;
            };
            settings: {
                info: SlackAPI<AdminTeamsSettingsInfoRequest, AdminTeamsSettingsInfoResponse>;
                setDefaultChannels: SlackAPI<AdminTeamsSettingsSetDefaultChannelsRequest, AdminTeamsSettingsSetDefaultChannelsResponse>;
                setDescription: SlackAPI<AdminTeamsSettingsSetDescriptionRequest, AdminTeamsSettingsSetDescriptionResponse>;
                setDiscoverability: SlackAPI<AdminTeamsSettingsSetDiscoverabilityRequest, AdminTeamsSettingsSetDiscoverabilityResponse>;
                setIcon: SlackAPI<AdminTeamsSettingsSetIconRequest, AdminTeamsSettingsSetIconResponse>;
                setName: SlackAPI<AdminTeamsSettingsSetNameRequest, AdminTeamsSettingsSetNameResponse>;
            };
        };
        usergroups: {
            addChannels: SlackAPI<AdminUsergroupsAddChannelsRequest, AdminUsergroupsAddChannelsResponse>;
            addTeams: SlackAPI<AdminUsergroupsAddTeamsRequest, AdminUsergroupsAddTeamsResponse>;
            listChannels: SlackAPI<AdminUsergroupsListChannelsRequest, AdminUsergroupsListChannelsResponse>;
            removeChannels: SlackAPI<AdminUsergroupsRemoveChannelsRequest, AdminUsergroupsRemoveChannelsResponse>;
        };
        users: {
            assign: SlackAPI<AdminUsersAssignRequest, AdminUsersAssignResponse>;
            invite: SlackAPI<AdminUsersInviteRequest, AdminUsersInviteResponse>;
            list: SlackAPI<AdminUsersListRequest, AdminUsersListResponse>;
            remove: SlackAPI<AdminUsersRemoveRequest, AdminUsersRemoveResponse>;
            session: {
                list: NoArgAllowedSlackAPI<AdminUsersSessionListRequest, AdminUsersSessionListResponse>;
                reset: SlackAPI<AdminUsersSessionResetRequest, AdminUsersSessionResetResponse>;
                resetBulk: SlackAPI<AdminUsersSessionResetBulkRequest, AdminUsersSessionResetBulkResponse>;
                invalidate: SlackAPI<AdminUsersSessionInvalidateRequest, AdminUsersSessionInvalidateResponse>;
                getSettings: SlackAPI<AdminUsersSessionGetSettingsRequest, AdminUsersSessionGetSettingsResponse>;
                setSettings: SlackAPI<AdminUsersSessionSetSettingsRequest, AdminUsersSessionSetSettingsResponse>;
                clearSettings: SlackAPI<AdminUsersSessionClearSettingsRequest, AdminUsersSessionClearSettingsResponse>;
            };
            unsupportedVersions: {
                export: NoArgAllowedSlackAPI<AdminUsersUnsupportedVersionsExportRequest, AdminUsersUnsupportedVersionsExportResponse>;
            };
            setAdmin: SlackAPI<AdminUsersSetAdminRequest, AdminUsersSetAdminResponse>;
            setExpiration: SlackAPI<AdminUsersSetExpirationRequest, AdminUsersSetExpirationResponse>;
            setOwner: SlackAPI<AdminUsersSetOwnerRequest, AdminUsersSetOwnerResponse>;
            setRegular: SlackAPI<AdminUsersSetRegularRequest, AdminUsersSetRegularResponse>;
        };
        workflows: {
            search: NoArgAllowedSlackAPI<AdminWorkflowsSearchRequest, AdminWorkflowsSearchResponse>;
            unpublish: SlackAPI<AdminWorkflowsUnpublishRequest, AdminWorkflowsUnpublishResponse>;
            collaborators: {
                add: SlackAPI<AdminWorkflowsCollaboratorsAddRequest, AdminWorkflowsCollaboratorsAddResponse>;
                remove: SlackAPI<AdminWorkflowsCollaboratorsRemoveRequest, AdminWorkflowsCollaboratorsRemoveResponse>;
            };
            permissions: {
                lookup: SlackAPI<AdminWorkflowsPermissionsLookupRequest, AdminWorkflowsPermissionsLookupResponse>;
            };
        };
    };
    readonly api: {
        test: NoArgAllowedSlackAPI<SlackAPIRequest, ApiTestResponse>;
    };
    readonly apps: {
        connections: {
            open: NoArgAllowedSlackAPI<SlackAPIRequest, AppsConnectionsOpenResponse>;
        };
        datastore: {
            put: SlackAPI<AppsDatastorePutRequest, AppsDatastorePutResponse>;
            update: SlackAPI<AppsDatastoreUpdateRequest, AppsDatastoreUpdateResponse>;
            get: SlackAPI<AppsDatastoreGetRequest, AppsDatastoreGetResponse>;
            query: SlackAPI<AppsDatastoreQueryRequest, AppsDatastoreQueryResponse>;
            delete: SlackAPI<AppsDatastoreDeleteRequest, SlackAPIResponse>;
        };
        event: {
            authorizations: {
                list: SlackAPI<AppsEventAuthorizationsListRequest, AppsEventAuthorizationsListResponse>;
            };
        };
        manifest: {
            create: SlackAPI<AppsManifestCreateRequest, AppsManifestCreateResponse>;
            delete: SlackAPI<AppsManifestDeleteRequest, AppsManifestDeleteResponse>;
            update: SlackAPI<AppsManifestUpdateRequest, AppsManifestUpdateResponse>;
            export: SlackAPI<AppsManifestExportRequest, AppsManifestExportResponse>;
            validate: SlackAPI<AppsManifestValidateRequest, AppsManifestValidateResponse>;
        };
        uninstall: SlackAPI<AppsUninstallRequest, AppsUninstallResponse>;
    };
    readonly assistant: {
        threads: {
            setStatus: SlackAPI<AssistantThreadsSetStatusRequest, AssistantThreadsSetStatusResponse>;
            setSuggestedPrompts: SlackAPI<AssistantThreadsSetSuggestedPromptsRequest, AssistantThreadsSetSuggestedPromptsResponse>;
            setTitle: SlackAPI<AssistantThreadsSetTitleRequest, AssistantThreadsSetTitleResponse>;
        };
    };
    readonly auth: {
        revoke: NoArgAllowedSlackAPI<AuthRevokeRequest, AuthRevokeResponse>;
        teams: {
            list: NoArgAllowedSlackAPI<AuthTeamsListRequest, AuthTeamsListResponse>;
        };
        test: NoArgAllowedSlackAPI<SlackAPIRequest, AuthTestResponse>;
    };
    readonly bots: {
        info: SlackAPI<BotsInfoRequest, BotsInfoResponse>;
    };
    readonly bookmarks: {
        add: SlackAPI<BookmarksAddRequest, BookmarksAddResponse>;
        edit: SlackAPI<BookmarksEditRequest, BookmarksEditResponse>;
        list: SlackAPI<BookmarksListRequest, BookmarksListResponse>;
        remove: SlackAPI<BookmarksRemoveRequest, BookmarksRemoveResponse>;
    };
    readonly canvases: {
        access: {
            delete: SlackAPI<CanvasesAccessDeleteRequest, CanvasesAccessDeleteResponse>;
            set: SlackAPI<CanvasesAccessSetRequest, CanvasesAccessSetResponse>;
        };
        create: SlackAPI<CanvasesCreateRequest, CanvasesCreateResponse>;
        edit: SlackAPI<CanvasesEditRequest, CanvasesEditResponse>;
        delete: SlackAPI<CanvasesDeleteRequest, CanvasesDeleteResponse>;
        sections: {
            lookup: SlackAPI<CanvasesSectionsLookupRequest, CanvasesSectionsLookupResponse>;
        };
    };
    readonly chat: {
        delete: SlackAPI<ChatDeleteRequest, ChatDeleteResponse>;
        deleteScheduledMessage: SlackAPI<ChatDeleteScheduledMessageRequest, ChatDeleteScheduledMessageResponse>;
        getPermalink: SlackAPI<ChatGetPermalinkRequest, ChatGetPermalinkResponse>;
        meMessage: SlackAPI<ChatMeMessageRequest, ChatMeMessageResponse>;
        postEphemeral: SlackAPI<ChatPostEphemeralRequest, ChatPostEphemeralResponse>;
        postMessage: SlackAPI<ChatPostMessageRequest, ChatPostMessageResponse>;
        scheduleMessage: SlackAPI<ChatScheduleMessageRequest, ChatScheduleMessageResponse>;
        scheduledMessages: {
            list: SlackAPI<ChatScheduledMessagesListRequest, ChatScheduledMessagesListResponse>;
        };
        unfurl: SlackAPI<ChatUnfurlRequest, ChatUnfurlResponse>;
        update: SlackAPI<ChatUpdateRequest, ChatUpdateResponse>;
    };
    readonly conversations: {
        acceptSharedInvite: SlackAPI<ConversationsAcceptSharedInviteRequest, ConversationsAcceptSharedInviteResponse>;
        approveSharedInvite: SlackAPI<ConversationsApproveSharedInviteRequest, ConversationsApproveSharedInviteResponse>;
        archive: SlackAPI<ConversationsArchiveRequest, ConversationsArchiveResponse>;
        close: SlackAPI<ConversationsCloseRequest, ConversationsCloseResponse>;
        create: SlackAPI<ConversationsCreateRequest, ConversationsCreateResponse>;
        declineSharedInvite: SlackAPI<ConversationsDeclineSharedInviteRequest, ConversationsDeclineSharedInviteResponse>;
        history: SlackAPI<ConversationsHistoryRequest, ConversationsHistoryResponse>;
        info: SlackAPI<ConversationsInfoRequest, ConversationsInfoResponse>;
        invite: SlackAPI<ConversationsInviteRequest, ConversationsInviteResponse>;
        inviteShared: SlackAPI<ConversationsInviteSharedRequest, ConversationsInviteSharedResponse>;
        join: SlackAPI<ConversationsJoinRequest, ConversationsJoinResponse>;
        kick: SlackAPI<ConversationsKickRequest, ConversationsKickResponse>;
        leave: SlackAPI<ConversationsLeaveRequest, ConversationsLeaveResponse>;
        list: NoArgAllowedSlackAPI<ConversationsListRequest, ConversationsListResponse>;
        listConnectInvites: NoArgAllowedSlackAPI<ConversationsListConnectInvitesRequest, ConversationsListConnectInvitesResponse>;
        mark: SlackAPI<ConversationsMarkRequest, ConversationsMarkResponse>;
        members: SlackAPI<ConversationsMembersRequest, ConversationsMembersResponse>;
        open: NoArgAllowedSlackAPI<ConversationsOpenRequest, ConversationsOpenResponse>;
        rename: SlackAPI<ConversationsRenameRequest, ConversationsRenameResponse>;
        replies: SlackAPI<ConversationsRepliesRequest, ConversationsRepliesResponse>;
        setPurpose: SlackAPI<ConversationsSetPurposeRequest, ConversationsSetPurposeResponse>;
        setTopic: SlackAPI<ConversationsSetTopicRequest, ConversationsSetTopicResponse>;
        unarchive: SlackAPI<ConversationsUnarchiveRequest, ConversationsUnarchiveResponse>;
        canvases: {
            create: SlackAPI<ConversationsCanvasesCreateRequest, ConversationsCanvasesCreateResponse>;
        };
        externalInvitePermissions: {
            set: SlackAPI<ConversationsExternalInvitePermissionsSetRequest, ConversationsExternalInvitePermissionsSetResponse>;
        };
    };
    readonly dnd: {
        endDnd: NoArgAllowedSlackAPI<SlackAPIRequest, DndEndDndResponse>;
        endSnooze: NoArgAllowedSlackAPI<SlackAPIRequest, DndEndSnoozeResponse>;
        info: SlackAPI<DndInfoRequest, DndInfoResponse>;
        setSnooze: SlackAPI<DndSetSnoozeRequest, DndSetSnoozeResponse>;
        teamInfo: NoArgAllowedSlackAPI<DndTeamInfoRequest, DndTeamInfoResponse>;
    };
    readonly emoji: {
        list: NoArgAllowedSlackAPI<EmojiListRequest, EmojiListResponse>;
    };
    readonly files: {
        delete: SlackAPI<FilesDeleteRequest, FilesDeleteResponse>;
        info: SlackAPI<FilesInfoRequest, FilesInfoResponse>;
        list: NoArgAllowedSlackAPI<FilesListRequest, FilesListResponse>;
        revokePublicURL: SlackAPI<FilesRevokePublicURLRequest, FilesRevokePublicURLResponse>;
        sharedPublicURL: SlackAPI<FilesSharedPublicURLRequest, FilesSharedPublicURLResponse>;
        /**
         * @deprecated use files.uploadV2 instead
         */
        upload: SlackAPI<FilesUploadRequest, FilesUploadResponse>;
        uploadV2: SlackAPI<FilesUploadV2Request, FilesUploadV2Response>;
        getUploadURLExternal: SlackAPI<FilesGetUploadURLExternalRequest, FilesGetUploadURLExternalResponse>;
        completeUploadExternal: SlackAPI<FilesCompleteUploadExternalRequest, FilesCompleteUploadExternalResponse>;
        remote: {
            info: NoArgAllowedSlackAPI<FilesRemoteInfoRequest, FilesRemoteInfoResponse>;
            list: NoArgAllowedSlackAPI<FilesRemoteListRequest, FilesRemoteListResponse>;
            add: SlackAPI<FilesRemoteAddRequest, FilesRemoteAddResponse>;
            update: NoArgAllowedSlackAPI<FilesRemoteUpdateRequest, FilesRemoteUpdateResponse>;
            remove: NoArgAllowedSlackAPI<FilesRemoteRemoveRequest, FilesRemoteRemoveResponse>;
            share: SlackAPI<FilesRemoteShareRequest, FilesRemoteShareResponse>;
        };
    };
    readonly functions: {
        completeSuccess: SlackAPI<FunctionsCompleteSuccessRequest, FunctionsCompleteSuccessResponse>;
        completeError: SlackAPI<FunctionsCompleteErrorRequest, FunctionsCompleteErrorResponse>;
    };
    readonly migration: {
        exchange: SlackAPI<MigrationExchangeRequest, MigrationExchangeResponse>;
    };
    readonly oauth: {
        v2: {
            access: SlackAPI<OAuthV2AccessRequest, OAuthV2AccessResponse>;
            exchange: SlackAPI<OAuthV2ExchangeRequest, OAuthV2ExchangeResponse>;
        };
    };
    readonly openid: {
        connect: {
            token: SlackAPI<OpenIDConnectTokenRequest, OpenIDConnectTokenResponse>;
            userInfo: NoArgAllowedSlackAPI<SlackAPIRequest, OpenIDConnectUserInfoResponse>;
        };
    };
    readonly pins: {
        add: SlackAPI<PinsAddRequest, PinsAddResponse>;
        list: SlackAPI<PinsListRequest, PinsListResponse>;
        remove: SlackAPI<PinsRemoveRequest, PinsRemoveResponse>;
    };
    readonly reactions: {
        add: NoArgAllowedSlackAPI<ReactionsAddRequest, ReactionsAddResponse>;
        get: NoArgAllowedSlackAPI<ReactionsGetRequest, ReactionsGetResponse>;
        list: NoArgAllowedSlackAPI<ReactionsListRequest, ReactionsListResponse>;
        remove: SlackAPI<ReactionsRemoveRequest, ReactionsRemoveResponse>;
    };
    readonly reminders: {
        add: SlackAPI<RemindersAddRequest, RemindersAddResponse>;
        complete: SlackAPI<RemindersCompleteRequest, RemindersCompleteResponse>;
        delete: SlackAPI<RemindersDeleteRequest, RemindersDeleteResponse>;
        info: SlackAPI<RemindersInfoRequest, RemindersInfoResponse>;
        list: SlackAPI<SlackAPIRequest, RemindersListResponse>;
    };
    readonly search: {
        all: SlackAPI<SearchAllRequest, SearchAllResponse>;
        files: SlackAPI<SearchFilesRequest, SearchFilesResponse>;
        messages: SlackAPI<SearchMessagesRequest, SearchMessagesResponse>;
    };
    readonly stars: {
        add: NoArgAllowedSlackAPI<StarsAddRequest, StarsAddResponse>;
        list: NoArgAllowedSlackAPI<StarsListRequest, StarsListResponse>;
        remove: NoArgAllowedSlackAPI<StarsRemoveRequest, StarsRemoveResponse>;
    };
    readonly team: {
        accessLogs: NoArgAllowedSlackAPI<TeamAccessLogsRequest, TeamAccessLogsResponse>;
        billableInfo: NoArgAllowedSlackAPI<TeamBillableInfoRequest, TeamBillableInfoResponse>;
        billing: {
            info: NoArgAllowedSlackAPI<SlackAPIRequest, TeamBillingInfoResponse>;
        };
        info: NoArgAllowedSlackAPI<TeamInfoRequest, TeamInfoResponse>;
        integrationLogs: NoArgAllowedSlackAPI<TeamIntegrationLogsRequest, TeamIntegrationLogsResponse>;
        preferences: {
            list: NoArgAllowedSlackAPI<SlackAPIRequest, TeamPreferencesListResponse>;
        };
        profile: {
            get: NoArgAllowedSlackAPI<TeamProfileGetRequest, TeamProfileGetResponse>;
        };
        externalTeams: {
            list: SlackAPI<TeamExternalTeamsListRequest, TeamExternalTeamsListResponse>;
            disconnect: SlackAPI<TeamExternalTeamsDisconnectRequest, TeamExternalTeamsDisconnectResponse>;
        };
    };
    readonly tooling: {
        tokens: {
            rotate: SlackAPI<ToolingTokensRotateRequest, ToolingTokensRotateResponse>;
        };
    };
    readonly usergroups: {
        create: SlackAPI<UsergroupsCreateRequest, UsergroupsCreateResponse>;
        disable: SlackAPI<UsergroupsDisableRequest, UsergroupsDisableResponse>;
        enable: SlackAPI<UsergroupsEnableRequest, UsergroupsEnableResponse>;
        list: NoArgAllowedSlackAPI<UsergroupsListRequest, UsergroupsListResponse>;
        update: SlackAPI<UsergroupsUpdateRequest, UsergroupsUpdateResponse>;
        users: {
            list: SlackAPI<UsergroupsUsersListRequest, UsergroupsUsersListResponse>;
            update: SlackAPI<UsergroupsUsersUpdateRequest, UsergroupsUsersUpdateResponse>;
        };
    };
    readonly users: {
        conversations: NoArgAllowedSlackAPI<UsersConversationsRequest, UsersConversationsResponse>;
        deletePhoto: NoArgAllowedSlackAPI<SlackAPIRequest, UsersDeletePhotoResponse>;
        getPresence: NoArgAllowedSlackAPI<UsersGetPresenceRequest, UsersGetPresenceResponse>;
        identity: NoArgAllowedSlackAPI<SlackAPIRequest, UsersIdentityResponse>;
        info: SlackAPI<UsersInfoRequest, UsersInfoResponse>;
        list: NoArgAllowedSlackAPI<UsersListRequest, UsersListResponse>;
        lookupByEmail: SlackAPI<UsersLookupByEmailRequest, UsersLookupByEmailResponse>;
        setPhoto: SlackAPI<UsersSetPhotoRequest, UsersSetPhotoResponse>;
        setPresence: SlackAPI<UsersSetPresenceRequest, UsersSetPresenceResponse>;
        profile: {
            get: NoArgAllowedSlackAPI<UsersProfileGetRequest, UsersProfileGetResponse>;
            set: NoArgAllowedSlackAPI<UsersProfileSetRequest, UsersProfileSetResponse>;
        };
        discoverableContacts: {
            lookup: SlackAPI<UsersDiscoverableContactsLookupRequest, UsersDiscoverableContactsLookupResponse>;
        };
    };
    readonly views: {
        open: SlackAPI<ViewsOpenRequest, ViewsOpenResponse>;
        publish: SlackAPI<ViewsPublishRequest, ViewsPublishResponse>;
        push: SlackAPI<ViewsPushRequest, ViewsPushResponse>;
        update: SlackAPI<ViewsUpdateRequest, ViewsUpdateResponse>;
    };
    readonly workflows: {
        triggers: {
            create: SlackAPI<WorkflowsTriggersCreateRequest, WorkflowsTriggersCreateResponse>;
            update: SlackAPI<WorkflowsTriggersUpdateRequest, WorkflowsTriggersUpdateResponse>;
            delete: SlackAPI<WorkflowsTriggersDeleteRequest, SlackAPIResponse>;
            list: NoArgAllowedSlackAPI<WorkflowsTriggersListRequest, WorkflowsTriggersListResponse>;
        };
    };
}
//# sourceMappingURL=api-client.d.ts.map